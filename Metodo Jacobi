{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyODkX7qwukl13+EVft0Mwqn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/richard1311/Metodo-Numericos/blob/master/Metodo%20Jacobi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uLnkEAO38eV_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "6bafd9d7-b9cc-4d72-fa0c-3deeef160ef6"
      },
      "source": [
        "import time\n",
        "start = time.time()\n",
        "\n",
        "def printAprox(arr): \n",
        "    for i in range(len(arr)):\n",
        "        print(\"x%s: %.5f\\t\" % (i+1, arr[i]), end = ' ')\n",
        "    print(\"\\n\")\n",
        "\n",
        "\n",
        "def metJacobi(matrSist, arrResult, tamanh, aprox=None, \\\n",
        "              maxItera = 100, tolMin = 1e-3):\n",
        "    \n",
        "    if aprox is None:\n",
        "        aprox = [0 for i in range(tamanh)] \n",
        "        \n",
        "    aprox2 = [0 for i in range(tamanh)]\n",
        "    #Dos vectores de aproximación garantizan la interación\n",
        "\n",
        "    matrAum = matrSist\n",
        "    arrResultAum = arrResult\n",
        "\n",
        "    for i in range(tamanh): #Aísla cada variable de la matriz\n",
        "        p = matrAum[i][i]\n",
        "        for j in range(tamanh):\n",
        "            if p != 0:\n",
        "                 matrAum[i][j] = -(matrAum[i][j] / float(p))\n",
        "            if i == j:\n",
        "                 matrAum[i][j] = 0\n",
        "        arrResultAum[i] = arrResultAum[i] / float(p)\n",
        "\n",
        "    sucesso = False\n",
        "    for x in range(maxItera): #Calcula aproximaciones\n",
        "        print(\"k=%d\" % (x+1))\n",
        "        if x%2 == 0:\n",
        "            for i in range(tamanh):\n",
        "                soma = 0\n",
        "                for j in range(tamanh):\n",
        "                    soma += matrAum[i][j] * aprox[j]\n",
        "                aprox2[i] = soma + arrResultAum[i]\n",
        "            printAprox(aprox2)\n",
        "            \n",
        "            if (max(aprox)!=0) and \\\n",
        "               (abs(max(aprox2) - max(aprox)) / abs(max(aprox))) < tolMin:\n",
        "                #se ha alcanzado la tolerancia\n",
        "                print(\" ¡El proceso fue exitoso! \") \n",
        "                sucesso = True\n",
        "                break\n",
        "            \n",
        "        else:\n",
        "            for i in range(tamanh):\n",
        "                soma = 0\n",
        "                for j in range(tamanh):\n",
        "                    soma += matrAum[i][j] * aprox2[j]\n",
        "                aprox[i] = soma + arrResultAum[i]\n",
        "            printAprox(aprox)\n",
        "\n",
        "            if (max(aprox2)!=0) and \\\n",
        "               (abs(max(aprox) - max(aprox2)) / abs(max(aprox2))) < tolMin:\n",
        "                # se ha alcanzado la tolerancia o valor porcentual\n",
        "                print(\" ¡El proceso fue exitoso! \") \n",
        "                sucesso = True\n",
        "                break\n",
        "            \n",
        "    if not sucesso:\n",
        "        print(\"El proceso excedió el número máximo de iteraciones.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "maxItera = 100      #Máximo de Interacciones\n",
        "tolMin = 1e-2       #Tolerancia\n",
        "\n",
        "#Para Ax = b\n",
        "matriz = [[ 10,  -1,   2,   0 ],    #A\n",
        "          [ -1,  11,  -1,   3 ],\n",
        "          [  2,  -1,  10,  -1 ],\n",
        "          [  0,   3,  -1,   8 ]]\n",
        "\n",
        "\n",
        "arrResult = [ 6,  25,  -11,  15 ]   #b\n",
        "\n",
        "tam = len(arrResult)\n",
        "aproxIni = [0 for i in range(tam)]      #Vetor de aproximaciones iniciales\n",
        "\n",
        "\n",
        "metJacobi(matriz, arrResult, tam, aproxIni, maxItera, tolMin)\n",
        "\n",
        "end = time.time()\n",
        "print(\"Tiempo de ejecución: {} segundos\".format(end-start))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "k=1\n",
            "x1: 0.60000\t x2: 2.27273\t x3: -1.10000\t x4: 1.87500\t \n",
            "\n",
            "k=2\n",
            "x1: 1.04727\t x2: 1.71591\t x3: -0.80523\t x4: 0.88523\t \n",
            "\n",
            "k=3\n",
            "x1: 0.93264\t x2: 2.05331\t x3: -1.04934\t x4: 1.13088\t \n",
            "\n",
            "k=4\n",
            "x1: 1.01520\t x2: 1.95370\t x3: -0.96811\t x4: 0.97384\t \n",
            "\n",
            "k=5\n",
            "x1: 0.98899\t x2: 2.01141\t x3: -1.01029\t x4: 1.02135\t \n",
            "\n",
            "k=6\n",
            "x1: 1.00320\t x2: 1.99224\t x3: -0.99452\t x4: 0.99443\t \n",
            "\n",
            " ¡El proceso fue exitoso! \n",
            "Tiempo de ejecución: 0.0038497447967529297 segundos\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}